/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import poly.cafe.dao.UserDAO;
import poly.cafe.dao.impl.UserDAOImpl;
import poly.cafe.entity.User;
import poly.cafe.ui.controller.AuthController;
import poly.cafe.util.XDialog;
import poly.cafe.util.XEmail;

/**
 *
 * @author DELL
 */
public class ForgotPasswordJDialog extends JDialog implements AuthController {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField txtUsername;
    private JTextField txtEmail;
    private JTextField txtVerificationCode;
    private JPasswordField txtNewPassword;
    private JPasswordField txtConfirmPassword;
    private JButton btnSendCode;
    private JButton btnResetPassword;
    private JButton btnCancel;
    // End of variables declaration//GEN-END:variables

    private UserDAO userDAO;
    private String verificationCode;
    private long codeExpirationTime;

    public ForgotPasswordJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.userDAO = new UserDAOImpl();
        initComponents();
    }

    public ForgotPasswordJDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        this.userDAO = new UserDAOImpl();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setTitle("Quên mật khẩu");
        setSize(276, 600);
        setLocationRelativeTo(null);
        setResizable(false);

        JPanel mainPanel = new JPanel(new BorderLayout());

        JPanel formPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        formPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        Font boldFont = new Font("Arial", Font.BOLD, 14);
        Font buttonFont = new Font("Arial", Font.BOLD, 14);

        JLabel lblUsername = new JLabel("Tên đăng nhập:");
        lblUsername.setFont(boldFont);
        formPanel.add(lblUsername);
        txtUsername = new JTextField(20);
        txtUsername.setPreferredSize(new Dimension(250, 25));
        formPanel.add(txtUsername);

        JLabel lblEmail = new JLabel("Email:");
        lblEmail.setFont(boldFont);
        formPanel.add(lblEmail);
        txtEmail = new JTextField(20);
        txtEmail.setPreferredSize(new Dimension(250, 25));
        formPanel.add(txtEmail);

        JLabel lblVerificationCode = new JLabel("Mã xác thực:");
        lblVerificationCode.setFont(boldFont);
        formPanel.add(lblVerificationCode);
        txtVerificationCode = new JTextField(20);
        txtVerificationCode.setPreferredSize(new Dimension(250, 25));
        formPanel.add(txtVerificationCode);

        JLabel lblNewPassword = new JLabel("Mật khẩu mới:");
        lblNewPassword.setFont(boldFont);
        formPanel.add(lblNewPassword);
        txtNewPassword = new JPasswordField(20);
        txtNewPassword.setPreferredSize(new Dimension(250, 25));
        formPanel.add(txtNewPassword);

        JLabel lblConfirmPassword = new JLabel("Xác nhận mật khẩu:");
        lblConfirmPassword.setFont(boldFont);
        formPanel.add(lblConfirmPassword);
        txtConfirmPassword = new JPasswordField(20);
        txtConfirmPassword.setPreferredSize(new Dimension(250, 25));
        formPanel.add(txtConfirmPassword);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));
        
        Dimension buttonSize = new Dimension(120, 30);
        
        btnSendCode = new JButton("Gửi mã xác thực");
        btnResetPassword = new JButton("Đặt lại mật khẩu");
        btnCancel = new JButton("Hủy");

        btnSendCode.setFont(buttonFont);
        btnResetPassword.setFont(buttonFont);
        btnCancel.setFont(buttonFont);
        
        btnSendCode.setPreferredSize(buttonSize);
        btnResetPassword.setPreferredSize(buttonSize);
        btnCancel.setPreferredSize(buttonSize);

        buttonPanel.add(btnSendCode);
        buttonPanel.add(btnResetPassword);
        buttonPanel.add(btnCancel);

        btnSendCode.addActionListener(e -> sendVerificationCode());
        btnResetPassword.addActionListener(e -> resetPassword());
        btnCancel.addActionListener(e -> dispose());

        mainPanel.add(formPanel, BorderLayout.CENTER);
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void sendVerificationCode() {
        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();

        if (username.isEmpty() || email.isEmpty()) {
            XDialog.alert("Vui lòng nhập đầy đủ thông tin!");
            return;
        }

        User user = userDAO.findByUsername(username);
        if (user == null || !user.getEmail().equals(email)) {
            XDialog.alert("Tên đăng nhập hoặc email không đúng!");
            return;
        }

        // Generate verification code
        verificationCode = String.format("%06d", (int) (Math.random() * 1000000));
        codeExpirationTime = System.currentTimeMillis() + (5 * 60 * 1000); // 5 minutes

        // Send email
        try {
            XEmail.sendVerificationCode(email, verificationCode);
            XDialog.alert("Mã xác thực đã được gửi đến email của bạn!");
        } catch (Exception e) {
            XDialog.alert("Không thể gửi mã xác thực. Vui lòng thử lại sau!");
        }
    }

    private void resetPassword() {
        String code = txtVerificationCode.getText().trim();
        String newPassword = new String(txtNewPassword.getPassword());
        String confirmPassword = new String(txtConfirmPassword.getPassword());

        if (code.isEmpty() || newPassword.isEmpty() || confirmPassword.isEmpty()) {
            XDialog.alert("Vui lòng nhập đầy đủ thông tin!");
            return;
        }

        if (!code.equals(verificationCode)) {
            XDialog.alert("Mã xác thực không đúng!");
            return;
        }

        if (System.currentTimeMillis() > codeExpirationTime) {
            XDialog.alert("Mã xác thực đã hết hạn!");
            return;
        }

        if (!newPassword.equals(confirmPassword)) {
            XDialog.alert("Mật khẩu xác nhận không khớp!");
            return;
        }

        User user = userDAO.findByUsername(txtUsername.getText().trim());
        user.setPassword(newPassword);
        userDAO.update(user);

        XDialog.alert("Đặt lại mật khẩu thành công!");
        dispose();
    }

    @Override
    public void open() {
        setVisible(true);
    }

    @Override
    public void login() {
        // Not used in this dialog
    }

    @Override
    public void logout() {
        // Not used in this dialog
    }

    @Override
    public void changePassword() {
        // Not used in this dialog
    }

    @Override
    public void forgotPassword() {
        open();
    }
}
